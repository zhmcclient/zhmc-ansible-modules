# This GitHub workflow will setup and run various kinds of tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test

on:
  schedule:
    # The schedule event always (and only) runs on the master branch.
    - # cron (in UTC): minute hour day_of_month month day_of_week
      cron: '00 05 * * SUN'
  push:
    branches: [ master, stable_0.9 ]
  pull_request:
    branches: [ master, stable_0.9 ]

jobs:

  set_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.select_matrix.outputs.matrix }}
    steps:
    - name: "Select matrix"
      id: select_matrix
      # Select full matrix when scheduled, and normal matrix otherwise.
      # The matrix is defined as a JSON string.
      # TODO: Find a way to define this with less escapes.
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then \
          echo "::set-output name=matrix::{ \
            \"os\": [ \"ubuntu-latest\", \"macos-latest\" ], \
            \"python-version\": [ \"2.7\", \"3.5\", \"3.6\", \"3.7\", \"3.8\", \"3.9\" ], \
            \"package_level\": [ \"latest\", \"minimum\" ] \
          }"; \
        else \
          echo "::set-output name=matrix::{ \
            \"os\": [ \"ubuntu-latest\" ], \
            \"python-version\": [ \"2.7\", \"3.5\", \"3.9\" ], \
            \"package_level\": [ \"latest\", \"minimum\" ], \
            \"include\": [ \
              { \
                \"os\": \"macos-latest\", \
                \"python-version\": \"3.9\", \
                \"package_level\": \"latest\" \
              } \
            ] \
          }"; \
        fi
    - name: Show matrix in JSON
      run: echo '${{ steps.select_matrix.outputs.matrix }}'

  test:
    needs: set_matrix
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix: ${{ fromJson(needs.set_matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display initial Python packages
      run: |
        echo "Installed Python packages:"
        pip list
    - name: Install the package and its dependents
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make install
        echo "Installed Python packages:"
        pip list
    - name: Development setup
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make develop
        echo "Installed Python packages:"
        pip list
    - name: Run sanity
      # Note: make sanity is excluded on Ansible 2.9 and Python 3.9 because it is not supported.
      if: ${{ ! (matrix.package_level == 'minimum' || matrix.python-version == '3.9') }}
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make sanity
    - name: Run docs
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make docs
    - name: Run test
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
        # TESTCASES: test_partition.py
      run: |
        make test
    - name: Send coverage result to coveralls.io
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_PARALLEL: true
        COVERALLS_FLAG_NAME: "${{ matrix.os }},${{ matrix.python-version }},${{ matrix.package_level }}"
      run: |
        coveralls

  test_finish:
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Install coveralls
      run: |
        pip3 install --upgrade coveralls
    - name: Send coverage finish to coveralls.io
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        coveralls --finish
