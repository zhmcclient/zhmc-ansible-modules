# Pip requirements file for development dependencies.


# Direct dependencies for development and indirect dependencies for development
# that are needed for some reason (must be consistent with minimum-constraints-develop.txt)

# Ansible validate-modules (no imports, invoked via validate-modules script)
mock>=2.0.0
voluptuous>=0.11.7

# Unit test (imports into testcases):
pytest>=6.2.5
testfixtures>=6.9.0
colorama>=0.4.6
# packaging is covered in requirements.txt
# requests is covered in requirements.txt
requests-mock>=1.6.0
immutable-views>=0.6.0

# Unit test (indirect dependencies):
pluggy>=1.3.0
decorator>=4.0.11

# Coverage reporting (no imports, invoked via coveralls script):
# coveralls versions 4.0.0/4.0.1 have increased their pinning of coverage to <8,
#   but they have also added a constraint for Python to <3.13. Due to that
#   Python pinning, we need to use the older coverage and coveralls versions on
#   Python>=3.13.
# Note: The pinnings on Python 3.13 prevent pip backtracking.
coverage>=7.8.0; python_version <= '3.12'
coverage>=6.5.0,<7.0; python_version >= '3.13'  # repeats pinning in coveralls 3.3.1
pytest-cov>=5.0.0; python_version <= '3.12'
pytest-cov>=7,<7.1; python_version >= '3.13'  # 6.0 would require coverage>=7.5
coveralls>=4.0.1; python_version <= '3.12'
coveralls>=3.3.1; python_version >= '3.13'  # 4.0 pins Python to <3.13
# PyYAML is specified in requirements.txt

# ansible-test
yamllint>=1.25.0; python_version == '3.9'
yamllint>=1.26.3; python_version >= '3.10'
pathspec>=0.9.0
# rstcheck is used only in ansible <= 2.10 / ansible <= 4

# ansible-lint
# ansible-lint is run only on officially supported ansible-core versions
# ansible-lint 6.0.0 requires ansible-core>=2.12, so it does not run on py39 with minimum package levels, so it is run only on py>=310
# ansible-lint 6.14.0 depends on yamllint>=1.26.3, ansible-core>=2.12.0, and the packages listed below
ansible-lint>=6.14.0; python_version >= '3.10'
black>=22.8.0; python_version >= '3.10'
rich>=12.0.0; python_version >= '3.10'
# wcmatch 8.5 fixes an AttributeError on Python 3.12
wcmatch>=8.5; python_version >= '3.10'
ansible-compat>=4.1.10; python_version >= '3.10'

# Safety CI by pyup.io
# safety 3.4.0 supports marshmallow>=4.0.0, see https://github.com/pyupio/safety/issues/715
# safety 3.4.0 started using httpx and tenacity
# pydantic 2.8.0 fixes an install issue on Python 3.13.
safety>=3.4.0
safety-schemas>=0.0.14
dparse>=0.6.4
ruamel.yaml>=0.17.21
click>=8.0.2
Authlib>=1.3.1
marshmallow>=3.15.0
pydantic>=2.8.0
# typer >=0.17.0 causes import issue for safety, see https://github.com/pyupio/safety/issues/778
typer>=0.12.1,<0.17.0
typer-cli>=0.12.1,<0.17.0
typer-slim>=0.12.1,<0.17.0
# safety 3.4.0 depends on psutil~=6.1.0
psutil~=6.1.0

# Bandit checker
bandit>=1.7.8

# Sphinx (no imports, invoked via sphinx-build script):
Sphinx>=7.2.0
docutils>=0.20.1
sphinx-git>=10.1.1
GitPython>=3.1.41
Pygments>=2.15.0
sphinx-rtd-theme>=2.0.0
sphinxcontrib-applehelp>=1.0.4
sphinxcontrib-devhelp>=1.0.2
sphinxcontrib-htmlhelp>=2.0.1
sphinxcontrib-jquery>=4.1
sphinxcontrib-jsmath>=1.0.1
sphinxcontrib-qthelp>=1.0.3
sphinxcontrib-serializinghtml>=1.1.9
sphinxcontrib-websupport>=1.2.4
autodocsumm>=0.2.12
Babel>=2.11.0

# Note: sphinx-versions in the latest released version 1.1.3 still uses the
#       deprecated Sphinx.add_stylesheet() method. That method is deprecated
#       since Sphinx 1.8, and was removed in Sphinx 4.0, and reintroduced as
#       deprecated in Sphinx 4.3.0.
# Getting sphinx-versions from this git repo addresses some issues.
# TODO: Remove getting sphinx-versions from this git repo.
git+https://github.com/andy-maier/sphinx-versions.git@1.1.3.post2#egg=sphinx-versions

# ansible-doc-extractor and it's dependent theme for docs generation (no imports, invoked via script):
# The Makefile defines in doc_build on which Python versions docs are built. Keep in sync with Makefile and minimum-constraints-develop.txt.
ansible-doc-extractor>=0.1.8
antsibull-docs-parser>=1.0.0

# PyLint (no imports, invoked via pylint script)
# Pylint is run in ansible sanity test, but it installs its own version
pylint>=3.3.1
astroid>=3.3.7
lazy-object-proxy>=1.4.3
wrapt>=1.17.2
platformdirs>=4.1.0
isort>=4.3.8
tomlkit>=0.10.1
dill>=0.3.7

# Flake8 and dependents (no imports, invoked via flake8 script):
# Pycodestyle is run in ansible sanity test, but it installs its own version
flake8>=6.1.0
mccabe>=0.7.0
pycodestyle>=2.11.0
pyflakes>=3.1.0
entrypoints>=0.3.0

# Package dependency management tools (not used by any make rules)
pipdeptree>=2.2.0
# pip-check-reqs 2.4.3 fixes a speed issue on Python 3.11 and requires pip>=21.2.4
# pip-check-reqs 2.5.0 has issue https://github.com/r1chardj0n3s/pip-check-reqs/issues/143
pip-check-reqs>=2.4.3,!=2.5.0; python_version <= '3.11'
pip-check-reqs>=2.5.3; python_version >= '3.12'
