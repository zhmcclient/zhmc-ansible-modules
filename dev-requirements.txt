# Pip requirements file for development dependencies.


# Include install dependencies
-r requirements.txt


# Direct dependencies for development and indirect dependencies for development
# that are needed for some reason (must be consistent with minimum-constraints.txt)

# Ansible validate-modules (no imports, invoked via validate-modules script)
mock>=2.0.0
voluptuous>=0.11.7

# Unit test (imports into testcases):
# packaging is specified in requirements.txt
pytest>=4.4.0; python_version <= '3.9'
pytest>=6.2.5; python_version == '3.10'
pytest>=7.0.0; python_version >= '3.11'
testfixtures>=6.9.0
colorama>=0.4.0
# mock>=2.0.0
# requests>=2.20.1
requests-mock>=1.6.0

# Unit test (indirect dependencies):
pluggy>=0.13.0
decorator>=4.0.11

# Coverage reporting (no imports, invoked via coveralls script):
# coveralls pins coverage to <7.0, causing pip backtracking to happen. Pinning
# it to <7.0 in this file saves the time for backtracking, but requires to
# occasionally check for new versions of coveralls without pinning.
coverage>=5.0,<7.0
pytest-cov>=2.7.0
coveralls>=3.3.0
# PyYAML is specified in requirements.txt

# ansible-test
yamllint>=1.25.0; python_version <= '3.9'
yamllint>=1.26.3; python_version >= '3.10'
pathspec>=0.9.0
# rstcheck 3.5.0 introduced a FutureWarning about Python 3.7 causing ansible sanity check "rstcheck" to fail.
# ansible sanity check "rstcheck" is used only in ansible <= 2.10.
rstcheck>=3.3.1,<4.0; python_version <= '3.9'  # ansible >= 4

# ansible-lint
# ansible-lint is run only on officially supported ansible-core versions
# ansible-lint 6.0.0 requires ansible-core>=2.12, so it does not run on py39 with minimum package levels, so it is run only on py>=310
# ansible-lint 6.14.0 depends on yamllint>=1.26.3, ansible-core>=2.12.0, and the packages listed below
ansible-lint>=6.14.0; python_version >= '3.10'
black>=22.8.0; python_version >= '3.10'
rich>=12.0.0; python_version >= '3.10'
# wcmatch 8.5 fixes an AttributeError on Python 3.12
wcmatch>=8.5; python_version >= '3.10'
ansible-compat>=4.1.10; python_version >= '3.10'

# Safety CI by pyup.io
# TODO: Remove temporary circumvention to pin safety to <3.0.0 when pyo3-ffi
#       supports Python 3.13 (see https://github.com/PyO3/pyo3/issues/4038#issuecomment-2156363013)
safety>=3.0.1; python_version <= '3.12'
safety>=2.2.0,!=2.3.5,<3.0.0; python_version >= '3.13'
safety-schemas>=0.0.2
# TODO: Change to dparse 0.6.4 once released
dparse>=0.6.4b0
ruamel.yaml>=0.17.21
click>=8.0.2
Authlib>=1.2.0
marshmallow>=3.15.0
pydantic>=1.10.13
typer>=0.12.0
typer-cli>=0.12.0
typer-slim>=0.12.0

# Bandit checker
bandit>=1.7.8

# Sphinx (no imports, invoked via sphinx-build script):
# Sphinx 7.2.0 started requiring Python>=3.9
Sphinx>=7.1.0; python_version == '3.8'
Sphinx>=7.2.0; python_version >= '3.9'
# Sphinx 7.1.0 pins docutils to <0.21
docutils>=0.18.1,<0.21; python_version == '3.8'
docutils>=0.18.1; python_version >= '3.9'
sphinx-git>=10.1.1
GitPython>=3.1.41
Pygments>=2.15.0
sphinx-rtd-theme>=2.0.0
sphinxcontrib-applehelp>=1.0.4
sphinxcontrib-devhelp>=1.0.2
sphinxcontrib-htmlhelp>=2.0.1
sphinxcontrib-jquery>=4.1
sphinxcontrib-jsmath>=1.0.1
sphinxcontrib-qthelp>=1.0.3
sphinxcontrib-serializinghtml>=1.1.5; python_version == '3.8'
sphinxcontrib-serializinghtml>=1.1.9; python_version >= '3.9'
sphinxcontrib-websupport>=1.2.4
autodocsumm>=0.2.12
Babel>=2.9.1

# Note: sphinx-versions in the latest released version 1.1.3 still uses the
#       deprecated Sphinx.add_stylesheet() method. That method is deprecated
#       since Sphinx 1.8, and was removed in Sphinx 4.0, and reintroduced as
#       deprecated in Sphinx 4.3.0.
# Getting sphinx-versions from this git repo addresses some issues.
# TODO: Remove getting sphinx-versions from this git repo.
git+https://github.com/andy-maier/sphinx-versions.git@1.1.3.post2#egg=sphinx-versions

# ansible-doc-extractor and it's dependent theme for docs generation (no imports, invoked via script):
# The Makefile defines in doc_build on which Python versions docs are built. Keep in sync with Makefile and minimum-constraints.txt.
ansible-doc-extractor>=0.1.8
antsibull-docs-parser>=1.0.0

# PyLint (no imports, invoked via pylint script)
# Pylint is run in ansible sanity test
# The sanity test running in Ansible's sanity virtual environment uses the following Pylint versions:
# Pylint 2.6 is used by Ansible 4 (lower Ansible versions don't have a sanity env)
# Pylint 2.9 is used by Ansible 5+6
# Pylint 2.15 is used by Ansible 7
# Pylint requires astroid
# Pylint 2.7 introduced the consider-using-generator check, which is raised.
# Pylint 2.11 introduced the consider-using-f-string check, which is raised.
# The Pylint versions defined here are used when the sanity test runs in the current virtual env.
#   Keep them in sync with the versions run in the sanity virtual env.
pylint>=2.6.1,<2.10; python_version <= '3.9'  # pylint 2.9
pylint>=2.6.1,<2.16; python_version >= '3.10' and python_version <= '3.11'  # pylint 2.15
pylint>=3.0.1; python_version >= '3.12'  # pylint 3.x
astroid>=2.4.0,<2.7; python_version <= '3.9'  # astroid 2.6
astroid>=2.4.0,<2.13; python_version >= '3.10' and python_version <= '3.11'  # astroid 2.12
astroid>=3.0.1; python_version >= '3.12'  # astroid 3.x
# used by pylint 2.14 which requires python_version >= '3.7' and is used by us only on py>=3.10
dill>=0.2; python_version == '3.11'
dill>=0.3.7; python_version >= '3.12'
platformdirs>=2.2.0; python_version >= '3.10' and python_version <= '3.11'
platformdirs>=3.2.0; python_version >= '3.12'
tomlkit>=0.10.1; python_version >= '3.10'
tomli>=1.1.0; python_version == '3.10'  # not needed on py>3.10

# Flake8 and dependents (no imports, invoked via flake8 script):
# flake8 4.0.0 fixes an AttributeError on Python 3.10.
# pycodestyle 2.6 (required by flake8 3.8) is used by Ansible 4 in its sanity env, so we use that as the minimum version on all Python versions
flake8>=3.8.0,<3.9; python_version == '3.8'  # flake8 3.8
flake8>=3.8.0,<5.0; python_version == '3.9'  # flake8 4.0
flake8>=3.8.0,<6.0; python_version >= '3.10' and python_version <= '3.11'  # flake8 5.0
flake8>=5.0.0,<6.0; python_version >= '3.12'  # flake8 5.0
pycodestyle>=2.6.0,<2.7; python_version == '3.8'  # pycodestyle 2.6
pycodestyle>=2.6.0,<2.9; python_version == '3.9'  # pycodestyle 2.8
pycodestyle>=2.6.0,<2.10; python_version >= '3.10' and python_version <= '3.11'  # pycodestyle 2.9
pycodestyle>=2.9.0,<2.10; python_version >= '3.12'  # pycodestyle 2.9
pyflakes>=2.2.0,<2.3; python_version == '3.8'  # pyflakes 2.2
pyflakes>=2.2.0,<2.5; python_version == '3.9'  # pyflakes 2.4
pyflakes>=2.2.0,<2.6; python_version >= '3.10' and python_version <= '3.11'  # pyflakes 2.5
pyflakes>=2.5.0,<2.6; python_version >= '3.12'  # pyflakes 2.5
mccabe>=0.6.0; python_version <= '3.11'
mccabe>=0.7.0; python_version >= '3.12'
entrypoints>=0.3.0

# Package dependency management tools (not used by any make rules)
pipdeptree>=2.2.0
# pip-check-reqs 2.4.0 requires Python>=3.8.
# pip-check-reqs 2.4.3 fixes a speed issue on Python 3.11 and requires pip>=21.2.4
# pip-check-reqs 2.5.0 has issue https://github.com/r1chardj0n3s/pip-check-reqs/issues/143
pip-check-reqs>=2.4.3,!=2.5.0; python_version <= '3.11'
pip-check-reqs>=2.5.3; python_version >= '3.12'
